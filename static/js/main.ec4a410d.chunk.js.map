{"version":3,"sources":["components/cell.js","components/board.js","actions/index.js","components/button.js","components/control.js","components/counter.js","components/rules.js","components/history.js","components/learn.js","App.js","bin/grid.js","reducers/reducer_board.js","reducers/reducer_play_status.js","reducers/reducer_generation_counter.js","reducers/index.js","serviceWorker.js","index.js"],"names":["components_cell","_ref","alive","newBorn","running","handleClick","react_default","a","createElement","onClick","className","concat","Board","_this","this","props","board","map","row","i","key","cell","j","status","currentState","Component","connect","dispatch","x","y","type","components_button","title","icon","Control","random","console","log","isRunning","clear","togglePlay","playState","tick","resizeSmall","resizeMedium","resizeLarge","clearInterval","timerId","stopPlaying","interval","setInterval","startPlaying","Counter","generations","counter","Rules","History","Learn","href","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bool","setState","checkRunning","e","state","rel","learn","components_board","control","rules","components_history","makeGrid","height","width","makeRandom","arguments","length","undefined","grid","value","Math","push","GRID_HEIGHT","GRID_WIDTH","initialGrid","initialState","rootReducer","combineReducers","action","slice","gridHeight","gridWidth","calculateNeighbours","topRow","bottomRow","leftColumn","rightColumn","total","gameState","cellIsAlive","neighbours","generationCounterReducer","Boolean","window","location","hostname","match","require","createStoreWithMiddleware","applyMiddleware","createStore","ReactDOM","render","es","store","reducers","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec4a410d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default ({alive, newBorn, running, handleClick}) =>\r\n(\r\n    <td\r\n        onClick={running ? '' : handleClick}\r\n        className={`${alive ? 'alive' : ''} ${newBorn ? 'new-born': ''}`}\r\n      // TODO: Write ternary or other conditional statement to prevent cell from being clicked during the playing of the game.\r\n    >\r\n    </td>\r\n  )","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { currentState } from '../actions/';\r\n\r\nimport Cell from './cell';\r\n\r\nclass Board extends Component {\r\n  render(){\r\n    return(\r\n      <div className=\"board\">\r\n        <table>\r\n          <tbody>\r\n            {this.props.board.map((row,i) =>\r\n              <tr key={i}>{row.map((cell, j) =>\r\n                <Cell\r\n                  key={j}\r\n                  alive={cell.status}\r\n                  newBorn={cell.newBorn}\r\n                  handleClick={() => this.props.currentState(i,j)}\r\n                  running={this.props.running}\r\n                />)}\r\n              </tr>)}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ board }) => {\r\n  return { board };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { currentState: (x,y) => dispatch(currentState(x,y)) }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\r\n","export function currentState(x,y) {\r\n  return {\r\n    type: 'TOGGLE_ALIVE',\r\n    x,\r\n    y\r\n  };\r\n}\r\n\r\nexport function makeRandomGrid() {\r\n  return {\r\n    type: 'MAKE_RANDOM'\r\n  };\r\n}\r\n\r\nexport function tick() {\r\n  return {\r\n    type: 'TICK'\r\n  };\r\n}\r\n\r\nexport function startPlaying(timerId) {\r\n  return {\r\n    type: 'PLAY',\r\n    timerId\r\n  };\r\n}\r\n\r\nexport function stopPlaying(timerId) {\r\n  return {\r\n    type: 'STOP',\r\n    timerId\r\n  };\r\n}\r\n\r\nexport function clear() {\r\n  return {\r\n    type: 'CLEAR',\r\n  };\r\n}\r\n\r\nexport function resizeSmall() {\r\n  return {\r\n    type: 'RESIZE_SMALL',\r\n  };\r\n}\r\n\r\nexport function resizeMedium() {\r\n  return {\r\n    type: 'RESIZE_MEDIUM',\r\n  };\r\n}\r\n\r\nexport function resizeLarge() {\r\n  return {\r\n    type: 'RESIZE_LARGE',\r\n  };\r\n}","import React from 'react';\r\n\r\nexport default ({title, icon, handleClick}) => (\r\n  <span onClick={handleClick} className=\"button\">\r\n    <i className={icon}></i> {title}\r\n  </span>\r\n)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeRandomGrid, tick, startPlaying, stopPlaying, clear, resizeSmall, resizeMedium, resizeLarge } from '../actions/';\r\n\r\nimport Button from './button';\r\n\r\nclass Control extends Component {\r\n  componentDidMount(){\r\n    this.props.random();\r\n    console.log(this.props.isRunning);\r\n    // this.togglePlay();\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"controls\">\r\n        <div className=\"buttons\">\r\n          <Button\r\n            handleClick={() => this.props.random()}\r\n            title={'Randomize'}\r\n            icon={'fa fa-random'}\r\n          />\r\n          <Button\r\n            handleClick={() => this.clear()}\r\n            title={'Clear'}\r\n            icon={'fa fa-undo'}\r\n          />\r\n          <Button\r\n            handleClick={() => {\r\n            this.togglePlay()\r\n            this.props.running ? this.props.isRunning(false) : this.props.isRunning(true)\r\n            }}\r\n            icon={this.props.playState.isRunning ? 'fa fa-pause' : 'fa fa-play' }\r\n            title={this.props.playState.isRunning ? 'Pause' : 'Play'}\r\n          />\r\n          <Button\r\n            handleClick={() => this.props.tick()}\r\n            icon={'fa fa-step-forward'}\r\n            title={'Step Forward +1'}\r\n          />\r\n          <br/><br/>\r\n          <div className=\"button-group\">\r\n          <Button\r\n            className=\"button\"\r\n            handleClick={() => this.props.resizeSmall()}\r\n            icon={'fa fa-th-large'}\r\n            title={'Small'}\r\n            />\r\n          <Button\r\n            className=\"button\"\r\n            handleClick={() => this.props.resizeMedium()}\r\n            icon={'fa fa-th-large'}\r\n            title={'Medium'}\r\n            />\r\n          <Button\r\n            className=\"button\"\r\n            handleClick={() => this.props.resizeLarge()}\r\n            icon={'fa fa-th-large'}\r\n            title={'Large'}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  togglePlay(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    } else {\r\n      let interval = setInterval(this.props.tick,100);\r\n      this.props.startPlaying(interval);\r\n    }\r\n  }\r\n  clear(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n      this.props.clear();\r\n  }\r\n  resizeSmall(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n    this.props.resizeSmall();\r\n  }\r\n  resizeMedium(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n    this.props.resizeMedium();\r\n  }\r\n  resizeLarge(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n    this.props.resizeLarge();\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({playState}) => {\r\n  return { playState };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    random: () => dispatch(makeRandomGrid()),\r\n    tick: () => dispatch(tick()),\r\n    startPlaying: (timerId) => dispatch(startPlaying(timerId)),\r\n    stopPlaying: () => dispatch(stopPlaying()),\r\n    clear: () => dispatch(clear()),\r\n    resizeSmall: () => dispatch(resizeSmall()),\r\n    resizeMedium: () => dispatch(resizeMedium()),\r\n    resizeLarge: () => dispatch(resizeLarge())\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Control)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Counter extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"counter\">\r\n        Generations: {this.props.generations}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({counter}) => {\r\n  return { generations: counter }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Counter);\r\n","import React, { Component } from 'react';\r\n\r\nclass Rules extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"rules\">\r\n        <h3 className=\"boldtext\">Rules</h3>\r\n        <p>\r\n          • If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies.<br/>\r\n          • If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.  \r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Rules;","import React, { Component } from 'react';\r\n\r\nclass History extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"history\">\r\n         <h3 className=\"boldtext\">History</h3>\r\n         <p>\r\n          Cellular automata are programs that operate on data which is typically stored in a grid. Typically, this grid is 2D, but it could be represented in any dimensions.\r\n         </p>\r\n         <br/>\r\n         <p>\r\n          The Game of Life is a cellular automaton developed by John Horton Conway in 1970.\r\n         </p>\r\n         <br/>\r\n         <p>\r\n          The game itself runs automatically requiring no further input from the time it is started. From then, observing the patterns that emerge or setting up the grid to a desired initial state can be ways in which the game can be enjoyed.\r\n         </p>\r\n         <br/>\r\n         <p>\r\n          In essence, this game is Turing complete, as it is capable of performing arbitrary, general purpose computation— although it may be impractical, it is theoretically possible to compute anything in a large enough grid and given enough time using the Game of Life.\r\n         </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default History;","import React, { Component } from 'react';\r\n\r\nclass Learn extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"learn\">\r\n        Learn more about John Conway's Game of Life&nbsp;<a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">here</a>. \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Learn;","import React, { Component } from 'react';\nimport Board from './components/board';\nimport Control from './components/control';\nimport Counter from './components/counter';\nimport Rules from './components/rules';\nimport History from './components/history';\nimport Learn from './components/learn';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      running: false,\n    }\n  }\n\n  isRunning = (bool) => {\n    this.setState({\n      running: bool \n    })\n    console.log(bool);\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\"></link>\n          <h1>Game of Life</h1>\n          <div>\n            <Learn/>\n          </div>\n          <Board \n            running={this.state.running}\n          />\n          <Counter />\n          <Control \n            running={this.state.running}\n            isRunning={this.isRunning}\n          />\n        </div>\n        <div className=\"whitespace\"/>\n        <div className=\"info\">\n          <Rules />\n          <History />\n        </div>\n        <div className=\"footer-whitespace\"/>\n      </div>\n    );\n  }\n\n  checkRunning = (e) => {\n    e = this.state;\n  }\n}\n\nexport default App;","export const makeGrid = (height, width, makeRandom = false) => {\r\n  let grid = [];\r\n    for (var i = 0; i < height; i++){\r\n      var row = [];\r\n      for (var j = 0; j < width; j++){\r\n        let value;\r\n        if (makeRandom){\r\n          value = Math.random() > 0.85;\r\n        }\r\n        row.push({\r\n          status: value,\r\n          newBorn: value\r\n        });\r\n      }\r\n      grid.push(row);\r\n    }\r\n    return grid;\r\n};\r\n\r\nexport const advanceGrid = function(grid = []){\r\n     let gridHeight = grid.length;\r\n     let gridWidth = grid[0].length;\r\n\r\n     let calculateNeighbours = function(x,y) {\r\n       //since the world is toroidal: if the cell is at the edge of the grid we\r\n       //will reference the cell on the opposite edge\r\n       let topRow = x-1 < 0 ? (gridHeight - 1) : x-1;\r\n       let bottomRow = (x+1 === gridHeight) ? 0 : x+1;\r\n       let leftColumn = y-1 < 0 ? (gridWidth - 1) : y-1;\r\n       let rightColumn = (y+1 === gridWidth) ? 0 : y+1;\r\n\r\n       let total = 0;\r\n       total+= grid[topRow][leftColumn].status;\r\n       total+= grid[topRow][y].status;\r\n       total+= grid[topRow][rightColumn].status;\r\n       total+= grid[x][leftColumn].status;\r\n       total+= grid[x][rightColumn].status;\r\n       total+= grid[bottomRow][leftColumn].status;\r\n       total+= grid[bottomRow][y].status;\r\n       total+= grid[bottomRow][rightColumn].status;\r\n\r\n       return total;\r\n     };\r\n     //apply the rules of the game by comparing with the existing grid to build\r\n     //a new array\r\n     let gameState = [];\r\n     for (let i = 0; i < gridHeight; i++) {\r\n       let row = [];\r\n       for (let j = 0; j < gridWidth; j++) {\r\n         let cellIsAlive = grid[i][j].status;\r\n         let neighbours = calculateNeighbours(i,j);\r\n           if (cellIsAlive) {\r\n                if (neighbours < 2) {\r\n                    row.push({ status: 0 });\r\n                } else if (neighbours > 3){\r\n                    row.push({ status: 0 });\r\n                } else {\r\n                    row.push({ status: 1 });\r\n                }\r\n            }\r\n            if (!cellIsAlive) {\r\n                if (neighbours === 3) {\r\n                row.push({\r\n                  status: 1,\r\n                  newBorn: true\r\n                });\r\n            } else {\r\n                row.push({ status: 0 });\r\n                }\r\n            }\r\n     }\r\n     gameState.push(row);\r\n   }\r\n   return gameState;\r\n };\r\n","import * as grid from '../bin/grid';\r\n\r\nlet GRID_HEIGHT = 40;\r\nlet GRID_WIDTH = 40;\r\nconst initialGrid = grid.makeGrid(GRID_HEIGHT,GRID_WIDTH);\r\n\r\nexport default (state = initialGrid, action) => {\r\n  switch(action.type){\r\n    case 'TOGGLE_ALIVE':\r\n      let board = state.slice(0);\r\n      let cell = board[action.x][action.y];\r\n      cell.status = !cell.status;\r\n      cell.newBorn = !cell.newBorn;\r\n      return board;\r\n    case 'RESIZE_SMALL':\r\n      GRID_HEIGHT = 15;\r\n      GRID_WIDTH = 15;\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, false);\r\n    case 'RESIZE_MEDIUM':\r\n      GRID_HEIGHT = 25;\r\n      GRID_WIDTH = 25;\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, false);\r\n    case 'RESIZE_LARGE':\r\n      GRID_HEIGHT = 40;\r\n      GRID_WIDTH = 40;\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, false);\r\n    case 'MAKE_RANDOM':\r\n      //true param requests a random grid from makeGrid method\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, true);\r\n    case 'CLEAR':\r\n      return grid.makeGrid(GRID_HEIGHT,GRID_WIDTH);\r\n    case 'TICK':\r\n      return grid.advanceGrid(state.slice(0));\r\n    default:\r\n      return state;\r\n  }\r\n};","const initialState = {\r\n  timerId: null,\r\n  isRunning: false\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch(action.type){\r\n    case 'PLAY':\r\n      return {\r\n        timerId: action.timerId,\r\n        isRunning: true\r\n      };\r\n    case 'STOP':\r\n      return {\r\n        timerId: null,\r\n        isRunning: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const counter = (state = 0, action) => {\r\n  switch(action.type){\r\n    case 'TICK':\r\n      return state + 1;\r\n    case 'CLEAR':\r\n      return 0\r\n    case 'MAKE_RANDOM':\r\n      return 0\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counter;","import { combineReducers } from 'redux';\r\n\r\nimport boardReducer from './reducer_board';\r\nimport playStatusReducer from './reducer_play_status';\r\nimport generationCounterReducer from './reducer_generation_counter';\r\n\r\nconst rootReducer = combineReducers({\r\n  board: boardReducer,\r\n  playState: playStatusReducer,\r\n  counter: generationCounterReducer,\r\n});\r\n\r\nexport default rootReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport App from './App';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\nrequire('./style/index.css')\n\n\nconst createStoreWithMiddleware = applyMiddleware()(createStore);\n\nReactDOM.render(\n<Provider store={createStoreWithMiddleware(reducers)}>\n  <App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}