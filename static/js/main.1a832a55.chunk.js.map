{"version":3,"sources":["components/cell.js","components/button.js","components/control.js","actions/index.js","components/board.js","components/counter.js","components/learn.js","App.js","bin/grid.js","reducers/reducer_board.js","reducers/reducer_play_status.js","reducers/reducer_generation_counter.js","reducers/index.js","serviceWorker.js","index.js"],"names":["components_cell","_ref","alive","newBorn","running","handleClick","react_default","a","createElement","onClick","className","concat","components_button","title","icon","Control","this","props","random","console","log","isRunning","_this","clear","togglePlay","playState","tick","resizeSmall","resizeMedium","resizeLarge","clearInterval","timerId","stopPlaying","interval","setInterval","startPlaying","Component","connect","dispatch","type","Board","board","map","row","i","key","cell","j","status","currentState","x","y","Counter","generations","counter","Learn","href","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bool","setState","checkRunning","e","state","rel","learn","components_board","control","makeGrid","height","width","makeRandom","arguments","length","undefined","grid","value","Math","push","GRID_HEIGHT","GRID_WIDTH","initialGrid","initialState","rootReducer","combineReducers","action","slice","gridHeight","gridWidth","calculateNeighbours","topRow","bottomRow","leftColumn","rightColumn","total","gameState","cellIsAlive","neighbours","generationCounterReducer","Boolean","window","location","hostname","match","require","createStoreWithMiddleware","applyMiddleware","createStore","ReactDOM","render","es","store","reducers","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a832a55.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default ({alive, newBorn, running, handleClick}) =>\r\n(\r\n    <td\r\n        onClick={running ? '' : handleClick}\r\n        className={`${alive ? 'alive' : ''} ${newBorn ? 'new-born': ''}`}\r\n      // TODO: Write ternary or other conditional statement to prevent cell from being clicked during the playing of the game.\r\n      >\r\n    </td>\r\n  )","import React from 'react';\r\n\r\nexport default ({title, icon, handleClick}) => (\r\n  <span onClick={handleClick} className=\"button\">\r\n    <i className={icon}></i> {title}\r\n  </span>\r\n)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeRandomGrid, tick, startPlaying, stopPlaying, clear, resizeSmall, resizeMedium, resizeLarge } from '../actions/';\r\n\r\nimport Button from './button';\r\n\r\nclass Control extends Component {\r\n  componentDidMount(){\r\n    this.props.random();\r\n    console.log(this.props.isRunning);\r\n    // this.togglePlay();\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"controls\">\r\n        <div className=\"buttons\">\r\n          <Button\r\n            handleClick={() => this.props.random()}\r\n            title={'Randomize'}\r\n            icon={'fa fa-random'}\r\n          />\r\n          <Button\r\n            handleClick={() => this.clear()}\r\n            title={'Clear'}\r\n            icon={'fa fa-undo'}\r\n          />\r\n          <Button\r\n            handleClick={() => {\r\n            this.togglePlay()\r\n            this.props.running ? this.props.isRunning(false) : this.props.isRunning(true)\r\n            }}\r\n            icon={this.props.playState.isRunning ? 'fa fa-pause' : 'fa fa-play' }\r\n            title={this.props.playState.isRunning ? 'Pause' : 'Play'}\r\n          />\r\n          <Button\r\n            handleClick={() => this.props.tick()}\r\n            icon={'fa fa-step-forward'}\r\n            title={'Step Forward +1'}\r\n          />\r\n          <br/><br/>\r\n          <div className=\"button-group\">\r\n          <Button\r\n            className=\"button\"\r\n            handleClick={() => this.props.resizeSmall()}\r\n            icon={'fa fa-th-large'}\r\n            title={'Small'}\r\n            />\r\n          <Button\r\n            className=\"button\"\r\n            handleClick={() => this.props.resizeMedium()}\r\n            icon={'fa fa-th-large'}\r\n            title={'Medium'}\r\n            />\r\n          <Button\r\n            className=\"button\"\r\n            handleClick={() => this.props.resizeLarge()}\r\n            icon={'fa fa-th-large'}\r\n            title={'Large'}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  togglePlay(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    } else {\r\n      let interval = setInterval(this.props.tick,100);\r\n      this.props.startPlaying(interval);\r\n    }\r\n  }\r\n  clear(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n      this.props.clear();\r\n  }\r\n  resizeSmall(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n    this.props.resizeSmall();\r\n  }\r\n  resizeMedium(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n    this.props.resizeMedium();\r\n  }\r\n  resizeLarge(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n    this.props.resizeLarge();\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({playState}) => {\r\n  return { playState };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    random: () => dispatch(makeRandomGrid()),\r\n    tick: () => dispatch(tick()),\r\n    startPlaying: (timerId) => dispatch(startPlaying(timerId)),\r\n    stopPlaying: () => dispatch(stopPlaying()),\r\n    clear: () => dispatch(clear()),\r\n    resizeSmall: () => dispatch(resizeSmall()),\r\n    resizeMedium: () => dispatch(resizeMedium()),\r\n    resizeLarge: () => dispatch(resizeLarge())\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Control)\r\n","export function currentState(x,y) {\r\n  return {\r\n    type: 'TOGGLE_ALIVE',\r\n    x,\r\n    y\r\n  };\r\n}\r\n\r\nexport function makeRandomGrid() {\r\n  return {\r\n    type: 'MAKE_RANDOM'\r\n  };\r\n}\r\n\r\nexport function tick() {\r\n  return {\r\n    type: 'TICK'\r\n  };\r\n}\r\n\r\nexport function startPlaying(timerId) {\r\n  return {\r\n    type: 'PLAY',\r\n    timerId\r\n  };\r\n}\r\n\r\nexport function stopPlaying(timerId) {\r\n  return {\r\n    type: 'STOP',\r\n    timerId\r\n  };\r\n}\r\n\r\nexport function clear() {\r\n  return {\r\n    type: 'CLEAR',\r\n  };\r\n}\r\n\r\nexport function resizeSmall() {\r\n  return {\r\n    type: 'RESIZE_SMALL',\r\n  };\r\n}\r\n\r\nexport function resizeMedium() {\r\n  return {\r\n    type: 'RESIZE_MEDIUM',\r\n  };\r\n}\r\n\r\nexport function resizeLarge() {\r\n  return {\r\n    type: 'RESIZE_LARGE',\r\n  };\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { currentState } from '../actions/';\r\n\r\nimport Cell from './cell';\r\nimport Control from './control';\r\n\r\nclass Board extends Component {\r\n  render(){\r\n    return(\r\n      <div className=\"board\">\r\n        <table>\r\n          <tbody>\r\n            {this.props.board.map((row,i) =>\r\n              <tr key={i}>{row.map((cell, j) =>\r\n                <Cell\r\n                  key={j}\r\n                  alive={cell.status}\r\n                  newBorn={cell.newBorn}\r\n                  handleClick={() => this.props.currentState(i,j)}\r\n                  running={this.props.running}\r\n                />)}\r\n              </tr>)}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ board }) => {\r\n  return { board };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { currentState: (x,y) => dispatch(currentState(x,y)) }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Counter extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"counter\">\r\n        Generations: {this.props.generations}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({counter}) => {\r\n  return { generations: counter }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Counter);\r\n","import React, { Component } from 'react';\r\n\r\nclass Learn extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"learn\">\r\n        Learn more about John Conway's Game of Life&nbsp;<a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">here</a>. \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Learn;","import React, { Component } from 'react';\nimport Board from './components/board';\nimport Control from './components/control';\nimport Counter from './components/counter';\nimport Learn from './components/learn';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      running: false,\n    }\n  }\n\n  isRunning = (bool) => {\n    this.setState({\n      running: bool \n    })\n    console.log(bool);\n  }\n\n  render() {\n    return (\n      <div>\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\"></link>\n        <h1>Game of Life</h1>\n        <div>\n          <Learn/>\n        </div>\n        <Board \n          running={this.state.running}\n        />\n        <Counter />\n        <Control \n          running={this.state.running}\n          isRunning={this.isRunning}\n        />\n      </div>\n    );\n  }\n\n  checkRunning = (e) => {\n    e = this.state;\n  }\n}\n\nexport default App;","export const makeGrid = (height, width, makeRandom = false) => {\r\n  let grid = [];\r\n    for (var i = 0; i < height; i++){\r\n      var row = [];\r\n      for (var j = 0; j < width; j++){\r\n        let value;\r\n        if (makeRandom){\r\n          value = Math.random() > 0.85;\r\n        }\r\n        row.push({\r\n          status: value,\r\n          newBorn: value\r\n        });\r\n      }\r\n      grid.push(row);\r\n    }\r\n    return grid;\r\n};\r\n\r\nexport const advanceGrid = function(grid = []){\r\n     let gridHeight = grid.length;\r\n     let gridWidth = grid[0].length;\r\n\r\n     let calculateNeighbours = function(x,y) {\r\n       //since the world is toroidal: if the cell is at the edge of the grid we\r\n       //will reference the cell on the opposite edge\r\n       let topRow = x-1 < 0 ? (gridHeight - 1) : x-1;\r\n       let bottomRow = (x+1 === gridHeight) ? 0 : x+1;\r\n       let leftColumn = y-1 < 0 ? (gridWidth - 1) : y-1;\r\n       let rightColumn = (y+1 === gridWidth) ? 0 : y+1;\r\n\r\n       let total = 0;\r\n       total+= grid[topRow][leftColumn].status;\r\n       total+= grid[topRow][y].status;\r\n       total+= grid[topRow][rightColumn].status;\r\n       total+= grid[x][leftColumn].status;\r\n       total+= grid[x][rightColumn].status;\r\n       total+= grid[bottomRow][leftColumn].status;\r\n       total+= grid[bottomRow][y].status;\r\n       total+= grid[bottomRow][rightColumn].status;\r\n\r\n       return total;\r\n     };\r\n     //apply the rules of the game by comparing with the existing grid to build\r\n     //a new array\r\n     let gameState = [];\r\n     for (let i = 0; i < gridHeight; i++) {\r\n       let row = [];\r\n       for (let j = 0; j < gridWidth; j++) {\r\n         let cellIsAlive = grid[i][j].status;\r\n         let neighbours = calculateNeighbours(i,j);\r\n           if (cellIsAlive) {\r\n                if (neighbours < 2) {\r\n                    row.push({ status: 0 });\r\n                } else if (neighbours > 3){\r\n                    row.push({ status: 0 });\r\n                } else {\r\n                    row.push({ status: 1 });\r\n                }\r\n            }\r\n            if (!cellIsAlive) {\r\n                if (neighbours === 3) {\r\n                row.push({\r\n                  status: 1,\r\n                  newBorn: true\r\n                });\r\n            } else {\r\n                row.push({ status: 0 });\r\n                }\r\n            }\r\n     }\r\n     gameState.push(row);\r\n   }\r\n   return gameState;\r\n };\r\n","import * as grid from '../bin/grid';\r\n\r\nlet GRID_HEIGHT = 40;\r\nlet GRID_WIDTH = 40;\r\nconst initialGrid = grid.makeGrid(GRID_HEIGHT,GRID_WIDTH);\r\n\r\nexport default (state = initialGrid, action) => {\r\n  switch(action.type){\r\n    case 'TOGGLE_ALIVE':\r\n      let board = state.slice(0);\r\n      let cell = board[action.x][action.y];\r\n      cell.status = !cell.status;\r\n      cell.newBorn = !cell.newBorn;\r\n      return board;\r\n    case 'RESIZE_SMALL':\r\n      GRID_HEIGHT = 15;\r\n      GRID_WIDTH = 15;\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, false);\r\n    case 'RESIZE_MEDIUM':\r\n      GRID_HEIGHT = 25;\r\n      GRID_WIDTH = 25;\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, false);\r\n    case 'RESIZE_LARGE':\r\n      GRID_HEIGHT = 40;\r\n      GRID_WIDTH = 40;\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, false);\r\n    case 'MAKE_RANDOM':\r\n      //true param requests a random grid from makeGrid method\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, true);\r\n    case 'CLEAR':\r\n      return grid.makeGrid(GRID_HEIGHT,GRID_WIDTH);\r\n    case 'TICK':\r\n      return grid.advanceGrid(state.slice(0));\r\n    default:\r\n      return state;\r\n  }\r\n};","const initialState = {\r\n  timerId: null,\r\n  isRunning: false\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch(action.type){\r\n    case 'PLAY':\r\n      return {\r\n        timerId: action.timerId,\r\n        isRunning: true\r\n      };\r\n    case 'STOP':\r\n      return {\r\n        timerId: null,\r\n        isRunning: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const counter = (state = 0, action) => {\r\n  switch(action.type){\r\n    case 'TICK':\r\n      return state + 1;\r\n    case 'CLEAR':\r\n      return 0\r\n    case 'MAKE_RANDOM':\r\n      return 0\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counter;","import { combineReducers } from 'redux';\r\n\r\nimport boardReducer from './reducer_board';\r\nimport playStatusReducer from './reducer_play_status';\r\nimport generationCounterReducer from './reducer_generation_counter';\r\n\r\nconst rootReducer = combineReducers({\r\n  board: boardReducer,\r\n  playState: playStatusReducer,\r\n  counter: generationCounterReducer,\r\n});\r\n\r\nexport default rootReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport App from './App';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\nrequire('./style/index.css')\n\n\nconst createStoreWithMiddleware = applyMiddleware()(createStore);\n\nReactDOM.render(\n<Provider store={createStoreWithMiddleware(reducers)}>\n  <App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}